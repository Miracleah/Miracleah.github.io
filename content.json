{"meta":{"title":"Miracle","subtitle":"把真诚和热爱趁年轻全部浪费掉","description":"这是我的博客测试描述，看看它会出现在哪个地方","author":"Miracle","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"基本的markdown语法总结","slug":"基本的markdown语法总结","date":"2022-05-16T15:34:42.345Z","updated":"2022-05-17T06:49:59.450Z","comments":true,"path":"2022/05/16/基本的markdown语法总结/","link":"","permalink":"http://example.com/2022/05/16/%E5%9F%BA%E6%9C%AC%E7%9A%84markdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/","excerpt":"markdown是一种轻量级的标记语言，对写博客或者整理笔记很有帮助","text":"markdown是一种轻量级的标记语言，对写博客或者整理笔记很有帮助 [TOC] Markdown基本语法的整理首先就是一级标题：用#加一个空格作为开头，后面的内容就是一级标题了。例如，我上面的标题写出来就是“# Markdown基本语法的整理” 类似的用两个#加空格作为二级标题的开头，以此类推…… 字体相关 粗体：在想要加粗的内容前后加两个“*“，就可以把包住的内容加粗。 斜体：在想要斜体的内容前后加一个“*”，就可以把包住的内容加斜。 分隔符：另起一行 ，打上三个“*”，就可以添加分隔符。 删除线：在想要画删除线的内容前后加两个~线。可以实现如下效果：我想删除这一段话 高亮：前后各使用两个=，把需要高亮的内容包裹，效果：==高亮==。 下划线：前使用\\ 后使用\\&lt;\\u&gt;包裹需要添加下划线的部分，或直接选中文字后：Ctrl + U 下标：前后使用各使用一个波浪号~包裹下标内容即可，效果：H~2~O. 上标：前后使用各使用一个\\^包裹下标内容即可，效果：X^2^. 换行 段内换行：在段尾敲两个以上的空格再敲回车 段落换行：空一行再敲回车。 如果想空多行可以直接使用“\\”来换行。 列表无序列表可以使用一个*号后面加一个空格来实现，效果为一个黑点，如下： 第一项 第二项 也可以使用+号。或者-号： 第一项 第二项 有序列表使用任意的数字加一个空格，例如一下效果： 第一 第二 …… 在Typora中，只需在第一次输入1. 再次按回车会自动补全数字标序。而如果在上述“第二”前面按Tab键，则上述的第二小项会变成第一小项的一个子项。 任务列表使用“- [ ]任务一”来添加任务列表，特别注意的是在横杠后和中括号里各有一个空格 [ ] 任务一 [ ] 任务二 …… 表格使用 | 来分隔不同的单元格 ，格式如下图所示： 需要注意的是，中间的短横线的数量必须大于等于三个，在表头开始前须空一行。 在Typora中，我们只需要打出上图中的表头部分，软件就会自动帮我们制表。使用Ctrl + Enter 可以为表格添加更多行。 表头 表头 内容 内容 内容 内容 引用文字等信息的引用使用一个大于号 &gt; 加一个空格，后面跟的内容就是引用的内容，实际效果如下： 世上无难事，只怕有心人。 如果要嵌套引用，只需在第一个&gt; 后跟上“引用的第一层”，然后敲回车，继续输入&gt; “引用的第二层”： 这是引用的一层 这是第二层 这是第三层 以此类推。如果你想跳出引用，只需敲回车，直至光标显示退出引用。（在Typora中是这样的） 代码的引用 如果是一段文字中的一小部分代码，可以使用一对反引号把你想引用的代码包裹起来即可，例如引用printf(&quot;hello world!&quot;) 需要强调的是：是用反引号，并非单引号。一般的键盘，反引号在Tab键上面。 如果是一段代码，在这段代码的开始和结束各用三个反引号，并在开始的三个反引号后标注你的代码类型（C、python、java等），例如： 123456#include&lt;stdio.h&gt;int main()&#123; printf(&quot;hello world!&quot;); return 0;&#125; 链接一个中括号[ ]加一个小括号( )；其中小括号( )里面放地址 例如：我的博客 点击上面的文字，就可以跳转到我的博客主页了。 也可以使用变量来放置地址，例如：我的博客 然后在此篇文章的末尾给变量加上地址上面我的用的是1, 那么我就需要在文章的末尾加上 1: jjwxdu.top 图片图片的添加，就在上面链接的基础上，在[ ]( )加一个感叹号！ 对于来源是网络的图片 ！图片 在小括号内( )写上图片的地址 如果是本机图片就在小括号内( )把图片所在的本机地址写上， 建议使用相对路径。 数学公式 行内公式前后各用一个美元符号“$”即可，例如$E=MC^2$ , $a^2+b^2=c^2$ 整行公式，前后各使用两个美元符号包裹即可： \\int_0^\\pi sin^2xdx \\int_0^{+\\infty} x^n e^{-x} dx = n!其中的数学表达式是遵循Latex语法的，想要掌握，还得学习一些Latex语法。","categories":[],"tags":[]},{"title":"新年快乐","slug":"新年快乐","date":"2022-01-31T05:42:16.840Z","updated":"2022-01-31T05:42:16.906Z","comments":true,"path":"2022/01/31/新年快乐/","link":"","permalink":"http://example.com/2022/01/31/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/","excerpt":"又是新的一年了，祝大家新年快乐。","text":"又是新的一年了，祝大家新年快乐。 愿新年胜旧年，愿将来胜过往，我与旧事归于尽，来年依旧迎花开。","categories":[],"tags":[]},{"title":"函数的递归","slug":"函数的递归","date":"2021-11-13T14:13:17.682Z","updated":"2021-11-13T14:27:02.566Z","comments":true,"path":"2021/11/13/函数的递归/","link":"","permalink":"http://example.com/2021/11/13/%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92/","excerpt":"c语言函数递归的总结与运用。","text":"c语言函数递归的总结与运用。 在c语言的函数部分，递归是一块比较难掌握但是又很重要的一个部分。所以就来总结总结遇到的一些问题，以帮助更好的理解与运用递归。 在开始之前，还是先来看看递归的定义。什么是递归呢？简单来讲就是程序调用自身的编程技巧。递归作为一种算法在程序设计语言中广泛应用。一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的但规模较小的问题来求解，递归策略只需少量的程序就可以描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的主要思考方式在于：大事化小，小事化了。 下面通过一个个地例题，我们逐渐认识递归，并总结一些东西。 1.接受一个整型值（无符号），按照顺序打印它的每一位。例如：输入1234，输出1 2 3 4. 123456789#include&lt;stdio.h&gt;void print(unsigned int n)&#123; if(n&gt;9) &#123; print(n/10); &#125; printf(&quot;%d &quot;,n%10);&#125; 通过一层层分析，我们可以了解到这个函数的运行情况。和比较简单的依次输出整数的每一位那一类题不一样，这个题你并不能确定输入的是几位数，但是这个函数就能很好的解决这个问题。就像剥洋葱一样，一层一层地弄开-解决，弄开-解决…….同时，我们也不难看出，函数中的选择语句非常重要，正是因为有了那个选择语句，这个递归才有尽头。否则，就是“死循环”。所以，在进行递归时，有两个必要条件： 一, 存在限制条件，当满足这个限制条件的时候。递归便不再继续。 二，每次递归调用之后越来越接近这个限制条件。 例如，在上面一个递归中，限制条件就是n&lt;=9，如果满足这个条件，递归就结束了，每次递归调用之后（n/10），n的值会靠近9这个限制条件。 2.求斐波那契数列第n项的值 斐波那契数列指的是从第三项起，每一项等于前两项之和。因为它的数学关系很明确，所以考虑利用函数的递归来完成。 123456789int Fib(int n)&#123; if(n==1) return 0; else if(n==2) return 1; else return Fib(n-2)+Fib(n-1);&#125; 其实类似于这种的函数递归很容易想明白，因为它具有明显的数学关系：Fib(n)=Fib(n-2)+Fib(n-1),我们只需要利用这个公式进行递归即可。类似地，求这种第n项与前一项有关系的数列的某一项时，可以考虑递归，思维难度低且代码简洁。 3.计算交错序列1-2/3+3/5-4/7+5/9-6/11+…的前N项之和。 12345678910111213141516171819202122232425#define _CRT_SECURE_NO_WARNINGS 1#include&lt;stdio.h&gt;#include&lt;math.h&gt;float A(int n)//函数的递归&#123; if (n == 1) return 1; else if (n % 2 == 0) return -2 - A(n - 1); else return abs(A(n - 1)) + 2;&#125;int main()&#123; int n = 0; scanf(&quot;%d&quot;, &amp;n); double sum = 0; int i = 0; for (i = 1; i &lt;= n; i++) &#123; sum = sum+ (i / A(i)); &#125; printf(&quot;%.3f&quot;, sum); return 0;&#125; 这个题我们容易发现这个数列是有规律的。它的分子和分母分别成等差数列，但是每一项的正负是交替的。这个时候我们想，如果它的每一项都是正值，那也太舒服了，直接利用递归就可以求出每一项的值。but，所以我们它的正负号是交替的，偶数项是负的，奇数项是正的，所以我们只需要在偶数项加一个负号即可。如果只考虑到这，那肯定就错了。因为这是递归，在计算奇数项的值时肯定会利用偶数项的值计算，如果我们只是给偶数项加一个负号，那么奇数项的值就出错了。这个时候我们考虑价格绝对值，把奇数项递归时的值变成正值。其实，对于我来说这个地方还是挺难想的，一不小心进去就出不来了（想不明白了）。。。。细品，品。。。 4.求阶乘 以一个简单的问题收尾，因为这篇文章实在是拖太久了（懒）。。。 1234567int Mul(int n)&#123; if(n==1) return 1; else return n*Mul(n-1);&#125; 万变不离其宗，这个问题其实和斐波那契数列那个问题一样，都是两项之间有明确的数学关系。n！=n*【（n-1！）】，只要能找到这个关系，这类问题就可以很轻松的解决。 函数的递归其实还是比较费脑筋的，尤其是遇到一些问题你不知道怎么去构造递归，就很麻烦。持续总结一些问题，积累积累经验。常更新（划掉）","categories":[],"tags":[]},{"title":"c语言--函数","slug":"c语言--函数","date":"2021-10-26T11:32:38.636Z","updated":"2021-11-13T14:24:25.892Z","comments":true,"path":"2021/10/26/c语言--函数/","link":"","permalink":"http://example.com/2021/10/26/c%E8%AF%AD%E8%A8%80--%E5%87%BD%E6%95%B0/","excerpt":"初识c语言，东西比较杂乱，所以写来整理，以便后续复习。","text":"初识c语言，东西比较杂乱，所以写来整理，以便后续复习。 1，先看最近遇到的一个问题：写一个函数，它的功能是使a,b两个变量的值交换。 函数的写法如下： 1234567void swap1(int x, int y)//函数定义&#123; int z=0;//引入一个中间变量 z=x; x=y; y=z;&#125; 然后在主函数使用它： 123456789include&lt;stdio.h&gt;int main()&#123; int a=20; int b=10; swap1(a,b);//函数调用 printf(&quot;%d %d&quot;,a,b); return 0;&#125; 编译运行后发现：a=20,b=10.也就是说a和b的值并没有交换，写的交换函数出问题了。但回过头来看一看，函数写的好像确实“一点问题都没有”，于是，我们调试这个代码，并监视a，b，x，y的值，发现：当a和b把值传给x，y的时候，x=a=20；y=b=10; 经过函数的作用：x=b=10 ; y=a=20; 终于，明白了问题所在：其实，这个程序交换的是x和y的值，并没有对a和b的值进行交换，但这并不是我们想要的；进一步监视&amp;a，&amp;b发现了这个问题的本质：当a和b把值传给x和y时，x和y在内存中分别开辟了一个空间，这个空间的地址不同于a和b，也就是说我们无论进行什么操作，都是对x和y操作的，并不会对a和b的值产生什么影响。于是我们对这个程序进行改进，使函数内部是对a和b进行操作的。改进后的函数如下： 1234567void swap2(int* pa, int* pb)//这里的pa和pb是指针变量，用来接收a和b的地址//函数定义&#123; int z=0;//引入一个中间变量 z=*pa; *pa=*pb; *pb=z;&#125; 再把主函数内的swap(a,b)改为swap(&amp;a,&amp;b),这样就把a和b的地址传给swap函数，用指针变量去接收地址，就可以完成值的交换。 其中在函数定义中的x和y，称之为形式参数 (形参)【可以是常量，变量，表达式，函数等】；在函数调用中的a和b称之为实际参数 (实参)【只有在函数被调用的时候才会实例化（分配内存单元）且在函数调用完成之后就自动销毁了，只在函数中有效】 swap1在被调用的时候，实参传给形参，其实形参是实参的一份临时拷贝。所以，改变形参，并不会改变实参。但是swap2中的pa和pb和a，b是对应的。 2，写一个函数，判断它是否为素数 首先，我们要明确如何判断一个数是不是质数，然后再考虑怎么去实现它。 简单的一个思路就是：假设这个数是n，然后n分别除以2——(n-1)(亦或者根号n) 对于依次做除法，可以利用for循环实现，但我们还得考虑，进行完除法操作后，还应该怎么办才能让这个函数发挥作用。 在这里，我用函数的返回值作为信息，以便于在调用时方便使用，即：如果这个数是素数就返回1，否则返回0； 具体函数如下：（这里我们需要判断的数均是大于等于2的） 123456789101112int prime_judge(int x)&#123; int i=0; for(i=2;i&lt;x;i++) &#123; if(x%i==0) &#123; return 0; &#125; &#125; return 1;&#125; 在程序中调用这个函数： 123456789101112131415#include&lt;stdio.h&gt;int main()&#123; int n=0; scanf(&quot;%d&quot;,&amp;n); if(prime_judge(n)==1)//利用选择语句，结合返回值进行判断 &#123; printf(&quot;%d is a prime.&quot;,n); &#125; else &#123; printf(&quot;%d is not a prime.&quot;,n); &#125; return 0；&#125; 以上是我的一个小总结，有时间还会总结更多的例子。 3，函数的调用： 函数的调用分为两类，一类是：传值调用(不需要改变主函数中的变量的值，只是把值传过去用一下)；另一类是：传址调用（把地址传给子函数，需要时可以改变主函数中变量的值）； 4，函数的嵌套调用和链式访问 在c语言的函数中，函数可以嵌套调用：可以在一个函数的内部调用（使用）另一个函数。但是，函数是不可以嵌套定义的：在定义函数的时候，一个函数内部不可以再定义一个函数； 链式访问：简单地来说，就是把一个函数的返回值作为另一个函数的参数； e.g 1printf(&quot;%d\\n&quot;,strlen(&quot;abc&quot;)); 在这里strlen函数的返回值作为了printf函数的参数； 值得注意的是：如果把函数定义在了主函数之后，那么在使用子函数的时候遵循“先声明，后使用”的原则，告诉编译器有一个函数叫什么，参数是什么，返回类型是什么。","categories":[],"tags":[]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2021-10-22T11:53:42.721Z","updated":"2021-10-26T11:37:57.539Z","comments":true,"path":"2021/10/22/我的第一篇博客/","link":"","permalink":"http://example.com/2021/10/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"历时将近半个月，我的博客终于上线啦！这是我在这里写下的第一篇文章","text":"历时将近半个月，我的博客终于上线啦！这是我在这里写下的第一篇文章 弄完博客后，我写下这篇文章来总结这次的经历和我两个月的大学生活。 首先是这次搭建博客，着实不易，在网上搜索教程，一步一步照猫画虎，但你还是会遇到各种错误，如果你足够幸运：你遇到的错误大多数人都遇到了，你可以很容易地在网上找到解决这个错误的方法。但，如果你的脸很黑：hhhh，几乎没人和你有同样的错误，或者是别人的解决方案并不适用于你。。。。不幸的是我每次遇到的问题属于脸黑型，在中途有过放弃的念想。每次整累了，快崩了，就放一放。有些问题，自己就没了（我也不知道为啥） 整个过程把“山重水复疑无路，柳暗花明又一村”体现的淋漓尽致。其实越是这种“尴尬”的局面，就越需要心态，有时候它真的可以决定最后的结果。 再说说自己这两个月的大学生活吧，说来惭愧，这两个月过的确实很一般。自己没有想象中的那么充满斗志，状态也只是满足于上课。也许是刚经历了紧绷的高三，现在一有时间就想给自己放假，没有明白自己想要做好什么事。以前高三的时候，下午吃完饭总会把渴望的眼光投向窗外的操场，然后观望一会就继续写题，想着大学时间多了，要多去操场遛一遛。然而，上了大学的实际情况是：这学期的体育打卡一次还没打。。。。。（真尴尬），真正迈进大学的校园，我才发现我正在迷茫的旋涡中挣扎，也许是大多数学生的共同特点，不知道自己将来会面临什么，也不知道自己应该做什么。希望自己能更快的适应大学生活，找到自己真正的热爱。 文字水平较差，我写完读起来，自己也会有尴尬的感觉，嘿嘿嘿……… ——end——","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-10-16T14:33:00.973Z","updated":"2021-10-22T09:55:18.175Z","comments":true,"path":"2021/10/16/hello-world/","link":"","permalink":"http://example.com/2021/10/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}
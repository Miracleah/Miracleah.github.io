<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基本的markdown语法总结</title>
      <link href="/2022/05/16/%E5%9F%BA%E6%9C%AC%E7%9A%84markdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2022/05/16/%E5%9F%BA%E6%9C%AC%E7%9A%84markdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>markdown是一种轻量级的标记语言，对写博客或者整理笔记很有帮助</p><span id="more"></span><h1 id="markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E7%9A%84%E6%95%B4%E7%90%86" tabindex="-1">Markdown基本语法的整理</h1><p>首先就是一级标题：用#加一个空格作为开头，后面的内容就是一级标题了。例如，我上面的标题写出来就是“# Markdown基本语法的整理”</p><p>类似的用两个#加空格作为二级标题的开头，以此类推…</p><h2 id="%E5%AD%97%E4%BD%93%E7%9B%B8%E5%85%B3" tabindex="-1">字体相关</h2><ol><li><strong>粗体</strong>：在想要加粗的内容<strong>前后</strong>加两个“*"，就可以把包住的内容加粗。</li><li><em>斜体</em>：在想要斜体的内容<strong>前后</strong>加一个“*”，就可以把包住的内容加斜。</li><li>分隔符：另起一行  ，打上三个“*”，就可以添加分隔符。</li><li>删除线：在想要画删除线的内容前后加两个~线。可以实现如下效果：<s>我想删除这一段话</s></li><li>高亮：前后各使用两个=，把需要高亮的内容包裹，效果：<mark>高亮</mark>。</li><li>下划线：前使用&lt;u&gt; 后使用&lt;\u&gt;包裹需要添加下划线的部分，或直接选中文字后：<kbd>Ctrl</kbd> + <kbd>U</kbd></li><li>下标：前后使用各使用一个波浪号~包裹下标内容即可，效果：H<sub>2</sub>O.</li><li>上标：前后使用各使用一个^包裹下标内容即可，效果：X<sup>2</sup>.</li></ol><hr><h2 id="%E6%8D%A2%E8%A1%8C" tabindex="-1">换行</h2><ol><li>段内换行：在段尾敲两个以上的空格再敲回车</li><li>段落换行：空一行再敲回车。</li><li>如果想空多行可以直接使用“&lt;br&gt;”来换行。</li></ol><hr><h2 id="%E5%88%97%E8%A1%A8" tabindex="-1">列表</h2><h3 id="%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8" tabindex="-1">无序列表</h3><p>可以使用一个*号后面加一个空格来实现，效果为一个黑点，如下：</p><ul><li>第一项</li><li>第二项</li></ul><p>也可以使用+号。或者-号：</p><ul><li>第一项</li></ul><ul><li>第二项</li></ul><h3 id="%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8" tabindex="-1">有序列表</h3><p>使用任意的数字加一个空格，例如一下效果：</p><ol><li>第一</li><li>第二</li></ol><p>…</p><p>在Typora中，只需在第一次输入1. 再次按回车会自动补全数字标序。而如果在上述“第二”前面按<kdb>Tab</kdb>键，则上述的第二小项会变成第一小项的一个子项。</p><h3 id="%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8" tabindex="-1">任务列表</h3><p>使用“- [ ]任务一”来添加任务列表，特别注意的是<strong>在横杠后和中括号里各有一个空格</strong></p><ul><li><input type="checkbox" id="checkbox0"><label for="checkbox0">任务一</label></li><li><input type="checkbox" id="checkbox1"><label for="checkbox1">任务二</label></li></ul><p>…</p><h2 id="%E8%A1%A8%E6%A0%BC" tabindex="-1">表格</h2><p>使用 | 来分隔不同的单元格  ，格式如下图所示：</p><p><img src="C:%5CUsers%5CMiracle%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220517124117088.png" alt="image-20220517124117088"></p><p>需要注意的是，中间的短横线的数量必须大于等于三个，在表头开始前须空一行。</p><p>在Typora中，我们只需要打出上图中的表头部分，软件就会自动帮我们制表。使用<kbd>Ctrl</kbd> + <kbd>Enter</kbd> 可以为表格添加更多行。</p><table><thead><tr><th style="text-align:center">表头</th><th style="text-align:center">表头</th></tr></thead><tbody><tr><td style="text-align:center">内容</td><td style="text-align:center">内容</td></tr><tr><td style="text-align:center">内容</td><td style="text-align:center">内容</td></tr></tbody></table><h2 id="%E5%BC%95%E7%94%A8" tabindex="-1">引用</h2><h3 id="%E6%96%87%E5%AD%97%E7%AD%89%E4%BF%A1%E6%81%AF%E7%9A%84%E5%BC%95%E7%94%A8" tabindex="-1">文字等信息的引用</h3><p>使用一个大于号 &gt; 加一个空格，后面跟的内容就是引用的内容，实际效果如下：</p><blockquote><p>世上无难事，只怕有心人。</p></blockquote><p>如果要嵌套引用，只需在第一个&gt; 后跟上“引用的第一层”，然后敲回车，继续输入&gt; “引用的第二层”：</p><blockquote><p>这是引用的一层</p><blockquote><p>这是第二层</p><blockquote><p>这是第三层</p></blockquote></blockquote></blockquote><p>以此类推。如果你想跳出引用，只需敲回车，直至光标显示退出引用。（在Typora中是这样的）</p><h3 id="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%BC%95%E7%94%A8" tabindex="-1">代码的引用</h3><ol><li><p>如果是一段文字中的一小部分代码，可以使用一对反引号把你想引用的代码包裹起来即可，例如引用<code>printf("hello world!")</code> 需要强调的是：是用<strong>反引号</strong>，并非单引号。一般的键盘，反引号在<kbd>Tab</kbd>键上面。</p></li><li><p>如果是一段代码，在这段代码的开始和结束各用三个反引号，并在开始的三个反引号后标注你的代码类型（C、python、java等），例如：</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="%E9%93%BE%E6%8E%A5" tabindex="-1">链接</h3><p>一个中括号[ ]加一个小括号( )；其中小括号( )里面放地址</p><p>例如：<a href="https://jjwxdu.top">我的博客</a></p><p>点击上面的文字，就可以跳转到我的博客主页了。</p><p>也可以使用变量来放置地址，例如：<a href="https://jjwxdu.top">我的博客</a></p><p>然后在此篇文章的末尾给变量加上地址上面我的用的是<a href="https://jjwxdu.top">1</a>,  那么我就需要在文章的末尾加上 <a href="https://jjwxdu.top">1</a>: jjwxdu.top</p><h2 id="%E5%9B%BE%E7%89%87" tabindex="-1">图片</h2><p>图片的添加，就在上面链接的基础上，在[ ]( )加一个感叹号！</p><p>对于<strong>来源是网络</strong>的图片</p><p>！<a href="https://i.postimg.cc/jSP9Rx9t/15b83281e8ce4d86f550ffbe910c4447.jpg">图片</a></p><p>在小括号内( )写上图片的地址</p><p>如果是<strong>本机图片</strong>就在小括号内( )把图片所在的本机地址写上， 建议使用相对路径。</p><h2 id="%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F" tabindex="-1">数学公式</h2><ol><li>行内公式前后各用一个美元符号即可，例如<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mi>M</mi><msup><mi>C</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E=MC^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></eq> , <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo>=</mo><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">a^2+b^2=c^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></eq></li><li>整行公式，前后各使用两个美元符号包裹即可：</li></ol><section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mi>π</mi></msubsup><mi>s</mi><mi>i</mi><msup><mi>n</mi><mn>2</mn></msup><mi>x</mi><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int_0^\pi sin^2xdx </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3262em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4143em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></span></eqn></section><section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></msubsup><msup><mi>x</mi><mi>n</mi></msup><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup><mi>d</mi><mi>x</mi><mo>=</mo><mi>n</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">\int_0^{+\infty} x^n e^{-x} dx = n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4332em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5212em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8213em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span></span></span></span></span></eqn></section><p>其中的数学表达式是遵循Latex语法的，想要掌握，还得学习一些Latex语法。</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新年快乐</title>
      <link href="/2022/01/31/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
      <url>/2022/01/31/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<p>又是新的一年了，祝大家新年快乐。</p><span id="more"></span><p>愿新年胜旧年，愿将来胜过往，我与旧事归于尽，来年依旧迎花开。</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>函数的递归</title>
      <link href="/2021/11/13/%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92/"/>
      <url>/2021/11/13/%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<p>c语言函数递归的总结与运用。</p><span id="more"></span><p>在c语言的函数部分，递归是一块比较难掌握但是又很重要的一个部分。所以就来总结总结遇到的一些问题，以帮助更好的理解与运用递归。</p><p>在开始之前，还是先来看看递归的定义。什么是递归呢？简单来讲就是程序调用自身的编程技巧。递归作为一种算法在程序设计语言中广泛应用。一个过程或函数在其定义或说明中有直接或间接<strong>调用自身</strong>的一种方法，它通常把一个大型复杂的问题<strong>层层转化</strong>为一个与原问题相似的但<strong>规模较小</strong>的问题来求解，递归策略只需少量的程序就可以描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的主要思考方式在于：<strong>大事化小，小事化了</strong>。</p><p>下面通过一个个地例题，我们逐渐认识递归，并总结一些东西。</p><p>1.接受一个整型值（无符号），按照顺序打印它的每一位。例如：输入1234，输出1 2 3 4.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print(n/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,n%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过一层层分析，我们可以了解到这个函数的运行情况。和比较简单的依次输出整数的每一位那一类题不一样，这个题你并不能确定输入的是几位数，但是这个函数就能很好的解决这个问题。就像剥洋葱一样，一层一层地弄开-解决，弄开-解决…同时，我们也不难看出，函数中的选择语句非常重要，正是因为有了那个选择语句，这个递归才有尽头。否则，就是“死循环”。所以，在进行递归时，有两个必要条件：</p><p><strong>一,   存在限制条件，当满足这个限制条件的时候。递归便不再继续。</strong></p><p><strong>二，每次递归调用之后越来越接近这个限制条件。</strong></p><p>例如，在上面一个递归中，限制条件就是n&lt;=9，如果满足这个条件，递归就结束了，每次递归调用之后（n/10），n的值会靠近9这个限制条件。</p><p>2.求斐波那契数列第n项的值</p><p>斐波那契数列指的是从第三项起，每一项等于前两项之和。因为它的数学关系很明确，所以考虑利用函数的递归来完成。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fib</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> Fib(n<span class="number">-2</span>)+Fib(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实类似于这种的函数递归很容易想明白，因为它具有明显的数学关系：Fib(n)=Fib(n-2)+Fib(n-1),我们只需要利用这个公式进行递归即可。类似地，求这种第n项与前一项有关系的数列的某一项时，可以考虑递归，思维难度低且代码简洁。</p><p>3.计算交错序列1-2/3+3/5-4/7+5/9-6/11+…的前N项之和。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> n)</span><span class="comment">//函数的递归</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span> - A(n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(A(n - <span class="number">1</span>)) + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum = sum+ (i / A(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3f&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题我们容易发现这个数列是有规律的。它的分子和分母分别成等差数列，但是每一项的正负是交替的。这个时候我们想，如果它的每一项都是正值，那也太舒服了，直接利用递归就可以求出每一项的值。but，所以我们它的正负号是交替的，偶数项是负的，奇数项是正的，所以我们只需要在偶数项加一个负号即可。如果只考虑到这，那肯定就错了。因为这是递归，在计算奇数项的值时肯定会利用偶数项的值计算，如果我们只是给偶数项加一个负号，那么奇数项的值就出错了。这个时候我们考虑价格绝对值，把奇数项递归时的值变成正值。其实，对于我来说这个地方还是挺难想的，一不小心进去就出不来了（想不明白了）。。。。细品，品。。。</p><p>4.求阶乘</p><p>以一个简单的问题收尾，因为这篇文章实在是拖太久了（<strong>懒</strong>）。。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Mul</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n*Mul(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>万变不离其宗，这个问题其实和斐波那契数列那个问题一样，都是两项之间有明确的数学关系。n！=n*【（n-1！）】，只要能找到这个关系，这类问题就可以很轻松的解决。</p><p>函数的递归其实还是比较费脑筋的，尤其是遇到一些问题你不知道怎么去构造递归，就很麻烦。持续总结一些问题，积累积累经验。常更新（划掉）</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c语言--函数</title>
      <link href="/2021/10/26/c%E8%AF%AD%E8%A8%80--%E5%87%BD%E6%95%B0/"/>
      <url>/2021/10/26/c%E8%AF%AD%E8%A8%80--%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>初识c语言，东西比较杂乱，所以写来整理，以便后续复习。</p><span id="more"></span><p>1，先看最近遇到的一个问题：写一个函数，它的功能是使a,b两个变量的值交换。</p><p>函数的写法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><span class="comment">//函数定义</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z=<span class="number">0</span>;<span class="comment">//引入一个中间变量</span></span><br><span class="line">    z=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在主函数使用它：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">10</span>;</span><br><span class="line">    swap1(a,b);<span class="comment">//函数调用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行后发现：a=20,b=10.也就是说a和b的值并没有交换，写的交换函数出问题了。但回过头来看一看，函数写的好像确实“一点问题都没有”，于是，我们调试这个代码，并监视a，b，x，y的值，发现：当a和b把值传给x，y的时候，x=a=20；y=b=10;  经过函数的作用：x=b=10 ; y=a=20; 终于，明白了问题所在：其实，这个程序交换的是x和y的值，并没有对a和b的值进行交换，但这并不是我们想要的；进一步监视&amp;a，&amp;b发现了这个问题的本质：当a和b把值传给x和y时，x和y在内存中分别开辟了一个空间，这个空间的地址不同于a和b，也就是说我们无论进行什么操作，都是对x和y操作的，并不会对a和b的值产生什么影响。于是我们对这个程序进行改进，使函数内部是对a和b进行操作的。改进后的函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span>* pa, <span class="keyword">int</span>* pb)</span><span class="comment">//这里的pa和pb是指针变量，用来接收a和b的地址//函数定义</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z=<span class="number">0</span>;<span class="comment">//引入一个中间变量</span></span><br><span class="line">    z=*pa;</span><br><span class="line">    *pa=*pb;</span><br><span class="line">    *pb=z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再把主函数内的swap(a,b)改为swap(&amp;a,&amp;b),这样就把a和b的地址传给swap函数，用指针变量去接收地址，就可以完成值的交换。</p><p>其中在函数定义中的x和y，称之为<strong>形式参数</strong> (形参)【可以是常量，变量，表达式，函数等】；在函数调用中的a和b称之为<strong>实际参数</strong> (实参)【只有在函数被调用的时候才会实例化（分配内存单元）且在函数调用完成之后就自动销毁了，只在函数中有效】</p><p><em>swap1</em>在被调用的时候，实参传给形参，其实形参是实参的一份<strong>临时拷贝</strong>。所以，改变形参，并不会改变实参。但是<em>swap2</em>中的<em>pa和</em>pb和a，b是对应的。</p><p>2，写一个函数，判断它是否为素数</p><p>首先，我们要明确如何判断一个数是不是质数，然后再考虑怎么去实现它。</p><p>简单的一个思路就是：假设这个数是n，然后n分别除以2——(n-1)(亦或者根号n) 对于依次做除法，可以利用for循环实现，但我们还得考虑，进行完除法操作后，还应该怎么办才能让这个函数发挥作用。</p><p>在这里，我用函数的返回值作为信息，以便于在调用时方便使用，即：如果这个数是素数就返回1，否则返回0；</p><p>具体函数如下：（这里我们需要判断的数均是大于等于2的）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime_judge</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;x;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在程序中调用这个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(prime_judge(n)==<span class="number">1</span>)<span class="comment">//利用选择语句，结合返回值进行判断</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d is a prime.&quot;</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d is not a prime.&quot;</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是我的一个小总结，有时间还会总结更多的例子。</p><p>3，函数的调用：</p><p>函数的调用分为两类，一类是：<strong>传值调用</strong>(不需要改变主函数中的变量的值，只是把值传过去用一下)；另一类是：<strong>传址调用</strong>（把地址传给子函数，需要时可以改变主函数中变量的值）；</p><p>4，函数的嵌套调用和链式访问</p><p>在c语言的函数中，函数可以<strong>嵌套调用</strong>：可以在一个函数的内部调用（使用）另一个函数。但是，函数是<strong>不可以</strong>嵌套定义的：在定义函数的时候，一个函数内部不可以再定义一个函数；</p><p><strong>链式访问</strong>：简单地来说，就是把一个函数的返回值作为另一个函数的参数；</p><p>e.g</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>));</span><br></pre></td></tr></table></figure><p>在这里strlen函数的返回值作为了printf函数的参数；</p><p><strong>值得注意的是</strong>：如果把函数定义在了主函数之后，那么在使用子函数的时候遵循**“先声明，后使用”**的原则，告诉编译器有一个函数叫什么，参数是什么，返回类型是什么。</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2021/10/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/10/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>历时将近半个月，我的博客终于上线啦！这是我在这里写下的第一篇文章</p><span id="more"></span><p>弄完博客后，我写下这篇文章来总结这次的经历和我两个月的大学生活。</p><p>首先是这次搭建博客，着实不易，在网上搜索教程，一步一步照猫画虎，但你还是会遇到各种错误，如果你足够幸运：你遇到的错误大多数人都遇到了，你可以很容易地在网上找到解决这个错误的方法。但，如果你的脸很黑：hhhh，几乎没人和你有同样的错误，或者是别人的解决方案并不适用于你。。。。不幸的是我每次遇到的问题属于脸黑型，在中途有过放弃的念想。每次整累了，快崩了，就放一放。有些问题，自己就没了（我也不知道为啥） 整个过程把“山重水复疑无路，柳暗花明又一村”体现的淋漓尽致。其实越是这种“尴尬”的局面，就越需要心态，有时候它真的可以决定最后的结果。</p><p>再说说自己这两个月的大学生活吧，说来惭愧，这两个月过的确实很一般。自己没有想象中的那么充满斗志，状态也只是满足于上课。也许是刚经历了紧绷的高三，现在一有时间就想给自己放假，没有明白自己想要做好什么事。以前高三的时候，下午吃完饭总会把渴望的眼光投向窗外的操场，然后观望一会就继续写题，想着大学时间多了，要多去操场遛一遛。然而，上了大学的实际情况是：这学期的体育打卡一次还没打。。。。。（真尴尬），真正迈进大学的校园，我才发现我正在迷茫的旋涡中挣扎，也许是大多数学生的共同特点，不知道自己将来会面临什么，也不知道自己应该做什么。希望自己能更快的适应大学生活，找到自己真正的热爱。</p><p>文字水平较差，我写完读起来，自己也会有尴尬的感觉，嘿嘿嘿…</p><p>——end——</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/16/hello-world/"/>
      <url>/2021/10/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start" tabindex="-1">Quick Start</h2><h3 id="create-a-new-post" tabindex="-1">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server" tabindex="-1">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files" tabindex="-1">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites" tabindex="-1">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
